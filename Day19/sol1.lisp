#!/usr/bin/env sbcl --script
(require "asdf")

(defun parse-input(filename)
    (with-open-file (file filename :direction :input)
        (let ((workflows (make-hash-table :test 'equal))
              (workflow nil)
              (rating nil)
              (total 0))
            (loop for line = (read-line file nil) while (not (string= line "")) collect
                (let* ((tokens (remove "" (uiop:split-string line :separator "{},") :test #'equal))
                       (label  (pop tokens))
                       (instr  (loop for token in tokens collect
                                       (cond
                                           ((string= token "A")
                                               'accept)
                                           ((string= token "R")
                                               'reject)
                                           ((search ":" token)
                                               (let* ((oper (if (search ">" token) '> '<))
                                                   (expr-tokens (uiop:split-string token :separator "><:"))
                                                   (lhs (pop expr-tokens))
                                                   (rhs (parse-integer (pop expr-tokens)))
                                                   (then (cond
                                                               ((string= (car expr-tokens) "A") 'accept)
                                                               ((string= (car expr-tokens) "R") 'reject)
                                                               (t (car expr-tokens)))))
                                                   (list oper lhs rhs then)
                                               ))
                                           (t token)
                                       )
                               )
                       ))
                    (setf (gethash label workflows) instr)
                )
            )
            (loop for line = (read-line file nil) while line do
                (setf rating (loop for (a b) on (remove "" (uiop:split-string line :separator "{=,}") :test #'equal) by #'cddr collect (cons a (parse-integer b))))
                (setf workflow (gethash "in" workflows))
                (loop for step = (car workflow) while step do
                    (cond
                        ((eql step 'accept)
                            (incf total (apply '+ (mapcar 'cdr rating)))
                            (setf workflow nil))
                        ((eql step 'reject)
                            (setf workflow nil))
                        ((stringp step)
                            (setf workflow (gethash step workflows)))
                        ((eql '> (first step))
                            (if (> (cdr (car (member (second step) rating :test 'equal :key 'car))) (third step))
                                (cond ((or (eql (fourth step) 'accept) (eql (fourth step) 'reject))
                                            (setf workflow (list (fourth step))))
                                      (t (setf workflow (gethash (fourth step) workflows))))
                                (setf workflow (cdr workflow))))
                        ((eql '< (first step))
                            (if (< (cdr (car (member (second step) rating :test 'equal :key 'car))) (third step))
                                (cond ((or (eql (fourth step) 'accept) (eql (fourth step) 'reject))
                                            (setf workflow (list (fourth step))))
                                      (t (setf workflow (gethash (fourth step) workflows))))
                                (setf workflow (cdr workflow))))
                        (t (assert nil))
                    )
                )
            )
            total
        )
        
    )
)

(format t "sample.txt part1: ~a~%" (parse-input "sample.txt"))
(format t "input.txt part1: ~a~%" (parse-input "input.txt"))
